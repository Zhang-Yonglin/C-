1.简述C++中命名空间的作用。
namespace AAA｛
    int a;
｝
using AAA::a;
AAA::a;
using namespace AAA;


2. 定义两个命名空间A 和 B 分别在A中和B中定义变量value
  在main函数中将两个空间的value打印出来。


3. C语言的三目运算符 ? : , 可以当左值么？ C++的是否可以？ 为什么？
C语言中不可以当左值，需要使用*  C++中可以当左值


4. 下面哪条语句是错误的？为什么？

(1 < 2? a: b) = 100;    正确
(1 < 2? 10: 20) = 100   错误


5. const int a; 在C++编译器中是否需要初始化，为什么？  需要  因为是常量
   
int *p = (int*)&a;
*p  = 20;  
在C++编译器中能够修改a的值：临时开辟内存temp

*p实际上是修改谁的值？ 修改的是临时创建的temp的值  a的值依然没有改变


6. 简述引用的特点？
 1.引用一定要初始化
 2.引用本质上是一个常量指针，省略了*，在 栈上 开辟空间


7. 如下写法是否正确，
int &a;  错误 因为引用一定要初始化   只有作为形参时不需要初始化


8. 
void swap1(int &a, int &b)
   
{
      
	int temp = a;
     
	 a = b;
     
	 b = temp;
 
}   正确（C++中推荐使用）

   

void swap2(int a, int b)
  
{
      
	int temp = a;
    
  	a = b;
     
 	b = temp;
   
}  错误 交换的是形参的值，实参的值不会改变

   

void swap3(int *a, int *b)
   
{
     
	 int temp = *a;
     
	 *a = *b;
     
	 *b = temp;
   
}  正确


swap1, swap2 swap3三个函数哪些是正确的。为什么？


9. 函数返回值如果是引用类型，为什么可以将 函数当左值？   因为返回的就是变量
   什么情况函数返回值不能当左值？

	int& get()
	{
	   int a;
	   return a;
	}  此情况不可接收返回，会发生段错误，因为a是局部变量，在函数调用结束后会被销毁  可以使用静态变量


10. 以下代码

int a = 20;
const int &re_a = a;
re_a = 30;          //此行代码会报错
是否正确。为什么？  不正确，因为re_a是常量，通常可以做形参，从而将变量a保护起来（即无法被修改）


11. 以下写法是否正确，如果不正确，如何修改？
    int &a = 40;
上面写法不正确，如果想要对常量进行引用，需要加const
const int &a = 40

